<?php

/**
 * Preventiva
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    usuario
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Preventiva extends BasePreventiva
{

 /*
  * Dar baixa na preventiva
  */
  public function darBaixa($checklist)
  {
    $this->setChecklist($checklist);
    $this->setStatus("Aguardando análise da Oi");
    $this->setJustificativaStatus("Preventiva aguardando avaliação da Oi");
    $this->save();
  }


 /*
  * Salvar checklist
  */
  public function salvarCheck($checklist)
  {
    $this->setChecklist($checklist);
    $this->setStatus("Orçamento em confecção pelo fornecedor");
    $this->setJustificativaStatus("Preventiva aguardando orçamento");
    $this->save();
  }

  /*
  * Aprovar preventiva
  */
  public function aprovar($justificativa)
  {
    $this->setStatus("Finalizada");
    $this->setJustificativaStatus($justificativa);
    $this->save();
  }

  /*
  * Reprovar preventiva
  */
  public function reprovar($justificativa)
  {
    $this->setStatus("Reprovada");
    $this->setJustificativaStatus($justificativa);
    $this->save();
  }


  /*
  * Preventiva não realizada
  */
  public function salvarNaoRealizada($checklist, $justificativa)
  {
    $this->setChecklist($checklist);
    $this->setStatus("Aguardando análise da Oi");
    $this->setJustificativaStatus($justificativa);
    $this->save();
  }



  /*
  * Pendenciar preventiva
  */
  public function pendenciar($justificativa)
  {
    $this->setStatus("Pendenciada");
    $this->setJustificativaStatus($justificativa);
    $this->save();
  }

 /*
  * Salvar preventiva
  */
  public function salvar($justificativa)
  {
    $this->setStatus("Em análise parcial da Oi");
    $this->setJustificativaStatus($justificativa);
    $this->save();
  }

  /*
  * Publicar orcamento
  */
  public function publishOrcamento($orcamento)
  {
    $this->setOrcamento($orcamento);
    $this->setOrcamentoId($orcamento->getId());
    $this->setStatus("Aguardando análise da Oi");
    $this->setJustificativaStatus("Orçamento aguardando aprovação para dar andamento na execução do chamado");
    $this->save();
  }

/*
 * Salvar parcialmente um orcamento
 */
  public function setLPUParcial ($orcamento) {
    $this->setOrcamento($orcamento);
    $this->setOrcamentoId($orcamento->getId());
    $this->setStatus("Orçamento em confecção pelo fornecedor");
    $this->setJustificativaStatus("Orçamento aguardando continuação");
    $this->save();    
  }

  /*
   * Retornar se preventiva esta vinculada
   */
  public function preventivaVinculada(){
    $preventivaVinculada = $this->verificarPreventivaVinculada($this->getId());
    $array=[];

    if(count($preventivaVinculada) > 0){
      if($preventivaVinculada[0]->getPreventivaPai() == $this->getId()){
        //return Doctrine_Core::getTable('Preventiva')->find($preventivaVinculada[0]->getPreventivaFilho()); 
        foreach ($preventivaVinculada as $vinculada) {
          array_push($array, Doctrine_Core::getTable('Preventiva')->find($vinculada->getPreventivaFilho()));
        }
      }
      else{
        //return Doctrine_Core::getTable('Preventiva')->find($preventivaVinculada[0]->getPreventivaPai());
        array_push($array, Doctrine_Core::getTable('Preventiva')->find($preventivaVinculada[0]->getPreventivaPai()));
      }
    }

    return $array;
  }


  /*
   * Verificar se preventiva e pai
   */
  public function verificarPreventivaVinculada($id_preventiva){
      $q = Doctrine_Query::create()
         ->from('Vinculacao v')
         ->where('v.preventiva_filho = ?', $id_preventiva) 
         ->orWhere('v.preventiva_pai = ?', $id_preventiva); 

      return Doctrine_Core::getTable('Vinculacao')->verificarPreventivaVinculada($q); 
  }

}