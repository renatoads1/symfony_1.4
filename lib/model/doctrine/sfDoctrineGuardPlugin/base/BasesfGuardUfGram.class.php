<?php

/**
 * BasesfGuardUfGram
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $gram_id
 * @property integer $uf_id
 * @property sfGuardGram $Gram
 * @property sfGuardUf $Uf
 * 
 * @method integer       getGramId()  Returns the current record's "gram_id" value
 * @method integer       getUfId()    Returns the current record's "uf_id" value
 * @method sfGuardGram   getGram()    Returns the current record's "Gram" value
 * @method sfGuardUf     getUf()      Returns the current record's "Uf" value
 * @method sfGuardUfGram setGramId()  Sets the current record's "gram_id" value
 * @method sfGuardUfGram setUfId()    Sets the current record's "uf_id" value
 * @method sfGuardUfGram setGram()    Sets the current record's "Gram" value
 * @method sfGuardUfGram setUf()      Sets the current record's "Uf" value
 * 
 * @package    usuario
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasesfGuardUfGram extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('sf_guard_uf_gram');
        $this->hasColumn('gram_id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             ));
        $this->hasColumn('uf_id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             ));

        $this->option('symfony', array(
             'form' => false,
             'filter' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardGram as Gram', array(
             'local' => 'gram_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardUf as Uf', array(
             'local' => 'uf_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}