<?php

/**
 * ChamadoTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ChamadoTable extends Doctrine_Table
{
   /**
    * Valores possiveis para o campo
    */
   
    static protected $choices = array();

    static protected $siglas = array();
 
    static public $types = array();

    static public $services = array();

    /*
     * Retonar opcoes para o campo tipo de servico
     */
    public function getTypes()
    {
      return self::$types;
    }

    /*	
     * Retonar opcoes para o campo servico requerido
     */
    public function getServices()
    {
      return self::$services;
    }

    /*
     * Retornar opcoes para o campo estado
     */
    public function getEstados()
    {
      return self::$choices;
    }

    /*
     * Retornar opcoes para o campo siglas
     */
    public function getSiglas()
    {
      return self::$siglas;
    }


    /**
     * Returns an instance of this class.
     *
     * @return object ChamadoTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Chamado');
    }

   /* public function getChamadosAtivos()
    {
      $q = $this->createQuery('j')
         ->where('j.chamado_ativado = 1')
         ->orderBy('j.created_at DESC');   
 
      return $q->execute();
    }

   public function recuperarChamadosAtivos()
   {
     $q->andWhere('a.chamado_ativado = 1');
 
     return $q->fetchOne();
   }*/

  /*
   * Retonar chamados inativos
   */
   public function recuperarChamadosInativos(Doctrine_Query $q)
   {
    return $this->addChamadosInativosQuery($q)->fetchOne();
   }
 
   /*
    * Retonar chamados ativos
    */
   public function getChamadosAtivos(Doctrine_Query $q = null)
   {
    return $this->addChamadosAtivosQuery($q)->execute();
   }

   /*
    * Query chamados ativos
    */ 
   public function addChamadosAtivosQuery(Doctrine_Query $q = null)
   {
     if (is_null($q))
     {
      $q = Doctrine_Query::create()
         ->from('Chamado j');
     }
 
     $alias = $q->getRootAlias();
 
     $q->orderBy($alias.'.created_at DESC');
		
      return $q;
   }

    /*
     * Query chamados inativos
     */
 /*  public function addChamadosInativosQuery(Doctrine_Query $q = null)
   {
     if (is_null($q))
     {
      $q = Doctrine_Query::create()
         ->from('Chamado j');
     }

     $alias = $q->getRootAlias();

     $q->andWhere($alias.'.chamado_ativado = ?', 0);
     $q->orderBy($alias.'.created_at DESC');

      return $q;

   }
*/

   /*
    * Query predios com base nas siglas
    */
   public function addPrediosQuery($sigla)
   {
      $q = Doctrine_Query::create()
         ->from('Chamado j')
         ->andWhere('j.sigla_da_estacao = ?', $sigla);

      return $q;
   }

   /*
    * Retonar Siglas
    */
   public function getChamado($sigla)
   {
       return $this->addPrediosQuery($sigla)->execute();
   }


   /*
    * Query predios com base nas siglas
    */
   public function addFiltrarTotQuery($request)
   {
      $q = Doctrine_Query::create()
         ->from('Chamado j');    

       if( !empty($request->getParameter('search'))) {
        $where_condition .= " ( id LIKE '%".$request->getParameter('search')."%' ";    
        $where_condition .= " OR status LIKE '%".$request->getParameter('search')."%' ";
        $where_condition .= " OR gram LIKE '%".$request->getParameter('search')."%' ";
        $where_condition .= " OR sigla_da_estacao LIKE '%".$request->getParameter('search')."%' ";
        $where_condition .= " OR tipo_de_servico LIKE '%".$request->getParameter('search')."%' ";
        $where_condition .= " OR created_at LIKE '%".$request->getParameter('search')."%' ";
        $where_condition .= " OR prioridade LIKE '%".$request->getParameter('search')."%' ";
        $where_condition .= " OR data_programada LIKE '%".$request->getParameter('search')."%' ";
        $where_condition .= " OR data_de_execucao LIKE '%".$request->getParameter('search')."%' ";
        $where_condition .= " OR relatorio_fotografico LIKE '%".$request->getParameter('search')."%' )";
      }  
      if(isset($where_condition) && $where_condition != '') {    
         $q->andWhere($where_condition);
      }     

      return $q;
   }

   /*
    * Retonar Siglas
    */
   public function filtrarTot($request)
   {
       return $this->addFiltrarTotQuery($request)->execute();
   }


   /*
    * Query predios com base nas siglas
    */
   public function addFiltrarRecordsQuery($request, $columns)
   {
      $q = Doctrine_Query::create()
         ->from('Chamado j');    

       if( !empty($request['search']['value']) ) {
        $where_condition .= " ( id LIKE '%".$request->getParameter('search')."%' ";    
        $where_condition .= " OR status LIKE '%".$request->getParameter('search')."%' ";
        $where_condition .= " OR gram LIKE '%".$request->getParameter('search')."%' ";
        $where_condition .= " OR sigla_da_estacao LIKE '%".$request->getParameter('search')."%' ";
        $where_condition .= " OR tipo_de_servico LIKE '%".$request->getParameter('search')."%' ";
        $where_condition .= " OR created_at LIKE '%".$request->getParameter('search')."%' ";
        $where_condition .= " OR prioridade LIKE '%".$request->getParameter('search')."%' ";
        $where_condition .= " OR data_programada LIKE '%".$request->getParameter('search')."%' ";
        $where_condition .= " OR data_de_execucao LIKE '%".$request->getParameter('search')."%' ";
        $where_condition .= " OR relatorio_fotografico LIKE '%".$request->getParameter('search')."%' )";
      }  
      if(isset($where_condition) && $where_condition != '') {    
         $q->andWhere($where_condition);
      }     

      //$q->orderBy($columns[$request['order'][0]['column']]."   ".$request['order'][0]['dir']);
      $q->limit($request->getParameter('start')." ,".$request->getParameter('length'));
	
      return $q;
   }

   /*
    * Retonar Siglas
    */
   public function filtrarRecords($request, $columns)
   {
       return $this->addFiltrarRecordsQuery($request, $columns)->execute();
   }

   
   
   
   
   /*
    * Query busca corretivas vinculadas a estação de determinada preventiva
    */
   public function addCorretivas($sigla)
   {
      $q = Doctrine_Query::create()
         ->from('Chamado j')
         ->andWhere('j.sigla_da_estacao = ?', $sigla)
         ->andWhere('j.status = "Em análise pelo fornecedor"');

      return $q;
   }

   /*
    * Retonar Siglas
    */
   public function getCorretivasEstacao($sigla)
   {
       return $this->addCorretivas($sigla)->execute();
   }
   
   
   
   
   
   
   
   
   
}
