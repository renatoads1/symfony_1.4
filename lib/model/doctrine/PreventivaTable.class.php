<?php

/**
 * PreventivaTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PreventivaTable extends ManutencaoTable
{

  static public $status = array(
    'Em análise pelo fornecedor' => 'Em análise pelo fornecedor',
    'Orçamento em confecção pelo fornecedor' => 'Orçamento em confecção pelo fornecedor',
    'Pendenciada' => 'Pendenciada',
    'Aguardando análise da Oi' => 'Aguardando análise da Oi',
    'Em análise parcial da Oi' => 'Em análise parcial da Oi',
    'Reprovada' => 'Reprovada',
    'Finalizada' => 'Finalizada'
  );

  /*
   *
   *
   */ 
   public function getStatus()
   {
     return self::$status;
   }

    /**
     * Returns an instance of this class.
     *
     * @return object PreventivaTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Preventiva');
    }

    /*
    * Query preventivas ativas
    */ 
    public function addPreventivaQuery(Doctrine_Query $q = null, $uf, $gram, $contrato, $grupo, $status)
    {
	     if (is_null($q))
	     {
	      $q = Doctrine_Query::create()
	         ->from('Preventiva j');
	     }
 
	     $alias = $q->getRootAlias();
	     $q->leftJoin($alias.'.base_predial a');	    

         //uf
	       if(count($uf)>0){
	         $aux = 'a.estado = "'.$uf[0]->getName().'"';

	         for($x = 1; $x < count($uf); $x++){
	           $aux = $aux.' OR a.estado = "'.$uf[$x]->getName().'"';
	         }

	         $q->andWhere($aux);
	        }

	     //gram
	       if(count($gram)>0){
	         if($grupo->getName() == "Fornecedor"){
	           $aux1 = 'a.gram_atendimento = "'.$gram[0]->getName().'"';
	        
	           for($x = 1; $x < count($gram); $x++){
	             $aux1 = $aux1.' OR a.gram_atendimento = "'.$gram[$x]->getName().'"';
	           }
	         } 
	         else{
	           $aux1 = 'a.gram = "'.$gram[0]->getName().'"';
	        
	           for($x = 1; $x < count($gram); $x++){
	             $aux1 = $aux1.' OR a.gram = "'.$gram[$x]->getName().'"';
	           }
	         } 

	         $q->andWhere($aux1);
	        }

	     //contrato
	       if(count($contrato)>0){
	         $aux2 = 'a.contrato = "'.$contrato[0]->getName().'"';

	         for($x = 0; $x < count($contrato); $x++){
	            $aux2 = $aux2.' OR a.contrato = "'.$contrato[$x]->getName().'"';
	         }

	         $q->andWhere($aux2);
	        }

	        if($status != null){
        	    $q->andWhere($alias.'.status = ?', $status);
	        }
	 
	       //Se for fornecedor, não exibe as preventivas tipo SDACI
		       if($grupo->getName() == "Fornecedor"){
			        $q->andWhere($alias.'.preventiva_tipo_id != ?', 8); 	
			     }	 	 
	 
			     //$q->andWhere('id not in (select preventiva_filho from vinculacao)');	
           $q->addOrderBy($alias.'.data_programada ASC LIMIT 1000');

           return $q;
   }

    /*
    * Retonar o numero de preventivas de acordo com o status
    */
   public function countPreventivas(Doctrine_Query $q = null, $status, $uf, $gram, $contrato, $grupo)
   {
     return $this->addCountPreventivasQuery($q, $status, $uf, $gram, $contrato, $grupo)->execute(array(), Doctrine_Core::HYDRATE_NONE);
   }


   /*
    * Query para recuperar chamados
    */
   public function addCountPreventivasQuery(Doctrine_Query $q = null, $status, $uf, $gram, $contrato, $grupo)
   {
      if (is_null($q))
      {
        $q = Doctrine_Query::create()
           ->select('COUNT(j.id)')
           ->from('preventiva j');
       }

     $alias = $q->getRootAlias();
     $q->leftJoin($alias.'.base_predial a');

       //uf
       if(count($uf)>0){
         $aux = 'a.estado = "'.$uf[0]->getName().'"';

         for($x = 1; $x < count($uf); $x++){
           $aux = $aux.' OR a.estado = "'.$uf[$x]->getName().'"';
         }

         $q->andWhere($aux);
       }

     //gram
       if(count($gram)>0){
         if($grupo->getName() == "Fornecedor"){
           $aux1 = 'a.gram_atendimento = "'.$gram[0]->getName().'"';
        
           for($x = 1; $x < count($gram); $x++){
             $aux1 = $aux1.' OR a.gram_atendimento = "'.$gram[$x]->getName().'"';
           }
         } 
         else{
           $aux1 = 'a.gram = "'.$gram[0]->getName().'"';
        
           for($x = 1; $x < count($gram); $x++){
             $aux1 = $aux1.' OR a.gram = "'.$gram[$x]->getName().'"';
           }
         }  

         $q->andWhere($aux1);
       }    

     //contrato
       if(count($contrato)>0){
         $aux2 = 'a.contrato = "'.$contrato[0]->getName().'"';

         for($x = 0; $x < count($contrato); $x++){
            $aux2 = $aux2.' OR a.contrato = "'.$contrato[$x]->getName().'"';
         }

         $q->andWhere($aux2);

       }

       if($status != "todos") $q->andWhere($alias.'.status = ?', $status);
	   
	   //Se for fornecedor, não exibe as preventivas tipo SDACI
	   if($grupo->getName() == "Fornecedor"){
		   $q->andWhere($alias.'.preventiva_tipo_id != ?', 8);
	   }
	  
	   //$q->andWhere('id not in (select preventiva_filho from vinculacao)');	
      return $q;
   }


   /*
    * Query predios com base nas siglas
    */
   public function addDataPreventivaQuery(Doctrine_Query $q = null, $sigla, $tipo_preventiva)
   {
     if (is_null($q))
     {
      $q = Doctrine_Query::create()
         ->select('j.data_programada AS data_programada')
         ->from('Preventiva j');
     }

     $alias = $q->getRootAlias();

     $q->leftJoin($alias.'.base_predial a');
     $q->where('a.sigla = ?', $sigla);
     $q->andWhere($alias.'.preventiva_tipo_id = ?', $tipo_preventiva);
     $q->andWhere($alias.'.status = ?', "Em análise pelo fornecedor");
     $q->orderBy($alias.'.created_at ASC');

     return $q;

   }
   
   
   /*
    * Retonar data da preventiva
    */
   public function getDataPreventiva(Doctrine_Query $q = null, $sigla, $tipo_preventiva)
   {
       return $this->addDataPreventivaQuery($q, $sigla, $tipo_preventiva)->execute(array(), Doctrine::HYDRATE_SCALAR);
   }

   /*
    * Query para recuperar preventivas que possuem orcamentos em um determinado status
    */
   public function addOrcamentoStatusQuery(Doctrine_Query $q = null, $status, $uf, $gram, $contrato, $grupo)
   {
     if (is_null($q))
     {
      $q = Doctrine_Query::create()
         ->from('Preventiva j');
     }

     $alias = $q->getRootAlias();
     $q->leftJoin($alias.'.base_predial a');

      //uf
         if(count($uf)>0){
           $aux = 'a.estado = "'.$uf[0]->getName().'"';

           for($x = 1; $x < count($uf); $x++){
             $aux = $aux.' OR a.estado = "'.$uf[$x]->getName().'"';
           }

           $q->andWhere($aux);
          }

       //gram
         if(count($gram)>0){
           if($grupo->getName() == "Fornecedor"){
             $aux1 = 'a.gram_atendimento = "'.$gram[0]->getName().'"';
          
             for($x = 1; $x < count($gram); $x++){
               $aux1 = $aux1.' OR a.gram_atendimento = "'.$gram[$x]->getName().'"';
             }
           } 
           else{
             $aux1 = 'a.gram = "'.$gram[0]->getName().'"';
          
             for($x = 1; $x < count($gram); $x++){
               $aux1 = $aux1.' OR a.gram = "'.$gram[$x]->getName().'"';
             }
           } 

           $q->andWhere($aux1);
          }

       //contrato
         if(count($contrato)>0){
           //$q->innerJoin($alias.'.chamado a');
           $aux2 = 'a.contrato = "'.$contrato[0]->getName().'"';

           for($x = 0; $x < count($contrato); $x++){
              $aux2 = $aux2.' OR a.contrato = "'.$contrato[$x]->getName().'"';
           }

           $q->andWhere($aux2);
          }

     $q->andWhere($alias.'.orcamento_id != ?', 'null');

     if($status=="Aprovado"){    
       $q->andWhere($alias.'.status = "Finalizada"');
       $q->leftJoin($alias.'.Orcamento b');
       $q->andWhere('b.edicao = ?', false);
       $q->orderBy('b.data_hora DESC');
     }
     else{
       $q->andWhere($alias.'.status = ?', $status);
       $q->leftJoin($alias.'.Orcamento b');
       $q->orderBy('b.created_at DESC');
     }

      return $q;
   }

   
  public function getPreventivasProximas($basePredial, $dataProgramada, $preventivaTipo){
       return $this->hasPreventivasProximas($basePredial, $dataProgramada, $preventivaTipo)->execute();
    }
   
	public function hasPreventivasProximas($basePredial, $dataProgramada, $preventivaTipo){
	   $q = Doctrine_Query::create()
	      ->select('id, status, pt.nome')
        ->from('Preventiva p')
		    ->leftJoin('p.preventiva_tipo pt')
        ->where('base_predial_id = ?', $basePredial)
        ->andWhere('data_programada = ?', $dataProgramada)
        ->andWhere('preventiva_tipo_id <> ?', $preventivaTipo)
        ->andWhere('status = "Em análise pelo fornecedor"')
        ->groupBy('preventiva_tipo_id');

      return $q; 
	}  

	
	public function getVinculadas($preventiva_id){
		 return $this->hasPreventivasVinculadas($preventiva_id)->execute();
	}	
  
	
	public function hasPreventivasVinculadas($preventiva_id){
       $q = Doctrine_Query::create()
         ->from('Preventiva v')
         ->where('v.id = ?', $preventiva_id);		
      return $q; 
	} 

    /*
    * Query preventivas ativas
    */ 
    public function addPreventivaExportQuery(Doctrine_Query $q = null, $uf, $gram, $contrato, $grupo)
    {
       if (is_null($q))
       {
        $q = Doctrine_Query::create()
           ->from('Preventiva j');
       }
 
       $alias = $q->getRootAlias();
       $q->leftJoin($alias.'.base_predial a');      

         //uf
         if(count($uf)>0){
           $aux = 'a.estado = "'.$uf[0]->getName().'"';

           for($x = 1; $x < count($uf); $x++){
             $aux = $aux.' OR a.estado = "'.$uf[$x]->getName().'"';
           }

           $q->andWhere($aux);
          }

       //gram
         if(count($gram)>0){
           if($grupo->getName() == "Fornecedor"){
             $aux1 = 'a.gram_atendimento = "'.$gram[0]->getName().'"';
          
             for($x = 1; $x < count($gram); $x++){
               $aux1 = $aux1.' OR a.gram_atendimento = "'.$gram[$x]->getName().'"';
             }
           } 
           else{
             $aux1 = 'a.gram = "'.$gram[0]->getName().'"';
          
             for($x = 1; $x < count($gram); $x++){
               $aux1 = $aux1.' OR a.gram = "'.$gram[$x]->getName().'"';
             }
           } 

           $q->andWhere($aux1);
          }

       //contrato
         if(count($contrato)>0){
           $aux2 = 'a.contrato = "'.$contrato[0]->getName().'"';

           for($x = 0; $x < count($contrato); $x++){
              $aux2 = $aux2.' OR a.contrato = "'.$contrato[$x]->getName().'"';
           }

           $q->andWhere($aux2);
          }

          if($status != null){
              $q->andWhere($alias.'.status = ?', $status);
          }
   
          $q->addOrderBy($alias.'.data_programada');

           return $q;
   }

    /*
    * Retonar o numero de preventivas de acordo com o status
    */
   public function getPreventivasExport(Doctrine_Query $q = null, $uf, $gram, $contrato, $grupo)
   {
     return $this->addPreventivaExportQuery($q, $uf, $gram, $contrato, $grupo)->execute();
   }

   /*
    * Query preventivas ativas
    */ 
    public function addTodosCiclosQuery(Doctrine_Query $q = null, $gram, $grupo, $contrato)
    {
       if (is_null($q))
       {
        $q = Doctrine_Query::create()
           ->from('Preventiva j');
       }
 
       $alias = $q->getRootAlias();
       $q->leftJoin($alias.'.base_predial a');      

       //gram
         if(count($gram)>0){
           if($grupo->getName() == "Fornecedor"){
             $aux1 = 'a.gram_atendimento = "'.$gram[0]->getName().'"';
          
             for($x = 1; $x < count($gram); $x++){
               $aux1 = $aux1.' OR a.gram_atendimento = "'.$gram[$x]->getName().'"';
             }
           } 
           else{
             $aux1 = 'a.gram = "'.$gram[0]->getName().'"';
          
             for($x = 1; $x < count($gram); $x++){
               $aux1 = $aux1.' OR a.gram = "'.$gram[$x]->getName().'"';
             }
           } 

           $q->andWhere($aux1);
          }

       //contrato
         if(count($contrato)>0){
           $aux2 = 'a.contrato = "'.$contrato[0]->getName().'"';

           for($x = 0; $x < count($contrato); $x++){
              $aux2 = $aux2.' OR a.contrato = "'.$contrato[$x]->getName().'"';
           }

           $q->andWhere($aux2);
          }
 
       //Se for fornecedor, não exibe as preventivas tipo SDACI
           if($grupo->getName() == "Fornecedor"){
              $q->andWhere($alias.'.preventiva_tipo_id != ?', 8);   
           }     
   
           $q->andWhere('id not in (select preventiva_filho from vinculacao)'); 
           $q->groupBy($alias.'.ciclo_id');

           return $q;
   }

    /*
    * Retonar o numero de preventivas de acordo com o status
    */
   public function getTodosCiclos(Doctrine_Query $q = null, $gram, $grupo, $contrato)
   {
     return $this->addTodosCiclosQuery($q, $gram, $grupo, $contrato)->execute();
   }

 /*
    * Query preventivas ativas
    */ 
    public function addTodosPreventivaTipoQuery(Doctrine_Query $q = null, $gram, $grupo, $contrato)
    {
       if (is_null($q))
       {
        $q = Doctrine_Query::create()
           ->from('Preventiva j');
       }
 
       $alias = $q->getRootAlias();
       $q->leftJoin($alias.'.base_predial a');      

       //gram
         if(count($gram)>0){
           if($grupo->getName() == "Fornecedor"){
             $aux1 = 'a.gram_atendimento = "'.$gram[0]->getName().'"';
          
             for($x = 1; $x < count($gram); $x++){
               $aux1 = $aux1.' OR a.gram_atendimento = "'.$gram[$x]->getName().'"';
             }
           } 
           else{
             $aux1 = 'a.gram = "'.$gram[0]->getName().'"';
          
             for($x = 1; $x < count($gram); $x++){
               $aux1 = $aux1.' OR a.gram = "'.$gram[$x]->getName().'"';
             }
           } 

           $q->andWhere($aux1);
          }

       //contrato
         if(count($contrato)>0){
           $aux2 = 'a.contrato = "'.$contrato[0]->getName().'"';

           for($x = 0; $x < count($contrato); $x++){
              $aux2 = $aux2.' OR a.contrato = "'.$contrato[$x]->getName().'"';
           }

           $q->andWhere($aux2);
          }

         //Se for fornecedor, não exibe as preventivas tipo SDACI
           if($grupo->getName() == "Fornecedor"){
              $q->andWhere($alias.'.preventiva_tipo_id != ?', 8);   
           }     
   
           $q->andWhere('id not in (select preventiva_filho from vinculacao)'); 
           $q->groupBy($alias.'.preventiva_tipo_id');

           return $q;
   }

    /*
    * Retonar o numero de preventivas de acordo com o status
    */
   public function getTodosPreventivaTipo(Doctrine_Query $q = null, $gram, $grupo, $contrato)
   {
     return $this->addTodosPreventivaTipoQuery($q, $gram, $grupo, $contrato)->execute();
   }  


    /*
   * Query para filtrar chamados
   */
    public function addNovoFiltro(Doctrine_Query $q = null, $id, $status, $estado, $periodicidade, $sigla, $ciclo, $tipoPreventiva, $gram, $gramAtendimento, $dataProgramada, $dataExecucao){

       if (is_null($q))
       {
         $q = Doctrine_Query::create()
              ->from('Preventiva j');
       }

       $alias = $q->getRootAlias();
       $where_condition = "";
       
       $q->leftJoin($alias.'.base_predial a');   
       $q->leftJoin($alias.'.Checklist c');   


     //Campo ID
       if(!empty($id)){
         $where_condition .= $alias.".id = ".$id; 
       }  
     
     //Campo Status
      if(!empty($status)){
         if(!empty($where_condition)){
           $where_condition .= " and ".$alias.".status ='".$status."'"; 
         }else{
           $where_condition .= $alias.".status ='".$status."'";   
         }
       }   
    
    //Campo Estado
      if(gettype($estado) == "string"){
        if(!empty($where_condition)){
          $where_condition .= " and a.estado ='".$estado."'"; 
        }else{
          $where_condition .= "a.estado ='".$estado."'"; 
        }
      }
      else{
        if(!empty($where_condition)){
          $where_condition .= " and (a.estado ='".$estado[0]."'"; 
        }else{
          $where_condition .= "(a.estado ='".$estado[0]."'"; 
        }        

        for ($i=1; $i < count($estado); $i++) { 
            $where_condition .= " or a.estado ='".$estado[$i]."'"; 
        }

        $where_condition .= ")";
      }

      //Campo Periodicidade
      if(!empty($periodicidade)){
        if(!empty($where_condition)){
          $where_condition .= " and ".$alias.".periodicidade_id ='".$periodicidade."'"; 
        }else{
          $where_condition .=  $alias.".periodicidade_id ='".$periodicidade."'"; 
        }
      }

      //Campo Sigla
      if(!empty($sigla)){
        if(!empty($where_condition)){
          $where_condition .= " and a.sigla ='".$sigla."'"; 
        }else{
          $where_condition .=  "a.sigla ='".$sigla."'"; 
        }
      }

      //Campo Periodicidade
      if(!empty($ciclo)){
        if(!empty($where_condition)){
          $where_condition .= " and ".$alias.".ciclo_id ='".$ciclo."'"; 
        }else{
          $where_condition .=  $alias.".ciclo_id ='".$ciclo."'"; 
        }
      }

      //Campo tipo_preventiva
      if(!empty($tipoPreventiva)){
        if(!empty($where_condition)){
          $where_condition .= " and ".$alias.".preventiva_tipo_id ='".$tipoPreventiva."'"; 
        }else{
          $where_condition .=  $alias.".preventiva_tipo_id ='".$tipoPreventiva."'"; 
        }
      }

      //Campo GRAM
     if(!empty($gram)){
      if(gettype($gram) == "string"){
        if(!empty($where_condition)){
          $where_condition .= " and a.gram ='".$gram."'"; 
        }else{
          $where_condition .= "a.gram ='".$gram."'"; 
        }
      }
      else{
        if(!empty($where_condition)){
          $where_condition .= " and (a.gram ='".$gram[0]."'"; 
        }else{
          $where_condition .= "(a.gram ='".$gram[0]."'"; 
        }        

        for ($i=1; $i < count($gram); $i++) { 
            $where_condition .= " or a.gram ='".$gram[$i]."'"; 
        }

        $where_condition .= ")";
      }
     } 

    //Campo GRAM de atendimento
     if(!empty($gramAtendimento)){
      if(gettype($gramAtendimento) == "string"){
        if(!empty($where_condition)){
          $where_condition .= " and a.gram_atendimento ='".$gramAtendimento."'"; 
        }else{
          $where_condition .= "a.gram_atendimento ='".$gramAtendimento."'"; 
        }
      }
      else{
        if(!empty($where_condition)){
          $where_condition .= " and (a.gram_atendimento ='".$gramAtendimento[0]."'"; 
        }else{
          $where_condition .= "(a.gram_atendimento ='".$gramAtendimento[0]."'"; 
        }        

        for ($i=1; $i < count($gramAtendimento); $i++) { 
            $where_condition .= " or a.gram_atendimento ='".$gramAtendimento[$i]."'"; 
        }

        $where_condition .= ")";
      }
     } 

    //Campo Data Programada
      if(!empty($dataProgramada)){
        if(!empty($where_condition)){
          //$where_condition .= " and ".$alias.".data_programada ='".$dataProgramada."'"; 
          
          $where_condition .= " and ".$alias.".data_programada BETWEEN '".$dataProgramada." 00:00:00' AND '".$dataProgramada." 23:59:59'"; 
          
        }else{
          //$where_condition .= $alias.".data_programada ='".$dataProgramada."'"; 
          
          $where_condition .= $alias.".data_programada BETWEEN '".$dataProgramada." 00:00:00' AND '".$dataProgramada." 23:59:59'"; 
        }
      }

     //Campo Data de Execucao
      if(!empty($dataExecucao)){
        if(!empty($where_condition)){
          //$where_condition .= " and ".$alias.".data_de_execucao ='".$dataExecucao."'"; 
        
         $where_condition .= " and c.data_de_execucao BETWEEN '".$dataExecucao." 00:00:00' AND '".$dataExecucao." 23:59:59'"; 
        }else{
          //$where_condition .= $alias.".data_de_execucao ='".$dataExecucao."'"; 
          
          $where_condition .= "c.data_de_execucao BETWEEN '".$dataExecucao." 00:00:00' AND '".$dataExecucao." 23:59:59'";
        }
      }
    
      if(isset($where_condition) && $where_condition != '') {    
        $q->andWhere($where_condition);
      }    

      return $q; 
     
  }


  /*
   * Retonar a data de realizacao da ultima preventiva
   */
  public function getDataPreventivaRealizada(Doctrine_Query $q = null, $sigla, $tipo_preventiva){
    return $this->addDataPreventivaRealizadaQuery($q, $sigla, $tipo_preventiva)->execute(array(), Doctrine::HYDRATE_SCALAR);
  }


  /*
   * Retonar a data de realizacao da ultima preventiva
   */
  public function getDataPreventivaPorTipo(Doctrine_Query $q = null, $sigla, $tipo_preventiva){
    return $this->addDataPreventivaRealizadaQuery($q, $sigla, $tipo_preventiva)->execute();
  }


  /*
   * Query para retornar a data de realizacao da ultima preventiva
   */
  public function addDataPreventivaRealizadaQuery(Doctrine_Query $q = null, $sigla, $tipo_preventiva){

     if (is_null($q))
     {
      $q = Doctrine_Query::create()
         ->from('Preventiva j');
     }

     $alias = $q->getRootAlias();

     $q->innerJoin($alias.'.base_predial a');
     $q->innerJoin($alias.'.Checklist c');   

     $q->where('a.sigla = ?', $sigla);
     $q->andWhere($alias.'.preventiva_tipo_id = ?', $tipo_preventiva);
     $q->andWhere($alias.'.status = ?', "Finalizada");
     $q->orderBy($alias.'.updated_at DESC');
     $q->limit(1);

     return $q;
  }  
 


}
